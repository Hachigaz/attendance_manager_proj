import { app as electronApp , BrowserWindow } from 'electron';
import app from "./app"
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron electronApp where to look for the Webpack-bundled electronApp code (depending on
// whether you're running in development or production).

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  electronApp.quit();
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
electronApp.on('ready', app.run);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
electronApp.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    electronApp.quit();
  }
});

electronApp.on('activate', () => {
  // On OS X it's common to re-create a window in the electronApp when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    app.run();
  }
});

// const isDev = process.env.NODE_ENV === 'development';
// // Adjust CSP for Webpack Dev Server
// session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
//   callback({
//     responseHeaders: {
//       ...details.responseHeaders,
//       "Content-Security-Policy": [
//         isDev
//           ? "default-src 'self' 'unsafe-eval' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:;" // Allow eval() in dev
//           : "default-src 'self'; script-src 'self'; style-src 'self'; img-src 'self' data:;" // Secure CSP for production
//       ]
//     }
//   });
// });

// In this file you can include the rest of your electronApp's specific main process
// code. You can also put them in separate files and import them here.
